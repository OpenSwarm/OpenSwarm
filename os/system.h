/*!
 * \file
 * \ingroup base
 * \author  Stefan M. Trenkwalder <s.trenkwalder@openswarm.org>
 * \version 1.0
 *
 * \date{07 July 2014}
 * 
 * \brief initiaises and starts OpenSwarm.
 * \copyright 	adapted FreeBSD License (see http://openswarm.org/license)
 */

/*! \mainpage OpenSwarm documentation
 * \image html "../doc/img/openswarm_logo.png"
 *
 * \section intro_sec Introduction
 * OpenSwarm is an easy-to-use event-driven preemptive operating system for miniature robots. It offers abstract hardware-independent functions to make user code more extendible, maintainable, and portable.
 * The hybrid kernel provides preemptive and cooperative scheduling, asynchronous programming models with events, and inter-process communication functions. \n\n  
 * OpenSwarm was created during the PhD of Stefan M Trenkwalder (http://trenkwalder.tech) at the University of Sheffield (http://www.sheffield.ac.uk/) under the Supervision of Dr. Roderich Gross and Dr. Andreas Kolling. 
 * 
 * The code of OpenSwarm can be basically divided into 3 different modules:
 * - \ref process
 * - \ref events
 * - \ref io (This includes device specific sensors and actuators)
 *
 * \section brief_dec Documentation Structure
 * This documentation was generated by Doxygen (http://www.doxygen.org) and is structured as follows
 * - Main Page: This tab represents an short introduction to and general comments on OpenSwarm
 * - Modules: This tab presents a list of logical units of OpenSwarm (such as Process Management or Event System)
 * - Data Structures: This tab shows a list of all used data structures inside OpenSwarm.
 * - Files: This tab lists the documentation of each individual file in OpenSwarm.
 *
 * \section link_sec Links
 * - http://www.openswarm.org/          	The official OpenSwarm website
 * - http://trenkwalder.tech/   		The academic webpage of Stefan Trenkwalder
 * - http://naturalrobotics.group.shef.ac.uk/   The website of the research group 
 * - http://openswarm.org/license/              The link to the newest license (in case it changed)
 *  
 * \section base_license License
 * LICENSE: adapted FreeBSD License (see http://openswarm.org/license)\n
 * Copyright (c) 2015, Stefan M. Trenkwalder\n
 * All rights reserved. 
 * 
 * \section base_thanks Thanks
 * OpenSwarm is part of the PhD of Stefan M. Trenkwalder (http://trenkwalder.tech) who is recipient of a DOC Fellowship of the Austrian Academy of Sciences (http://www.oeaw.ac.at/).
 */

/*! \defgroup base Base
 * \brief Basic functions to start and initialise the operating system; allocate, free and copy memory, and create and end atomic sections.
 * 
 * \author  Stefan M. Trenkwalder <s.trenkwalder@openswarm.org>
 * 
 * \section sec_intro_base Introduction
 * This package contains basic functions to initialise and start all modules of OpenSwarm. This part of OpenSwarm executes all three modules
 *  -# Process Management \sa procMan
 *  -# \sa events
 *  -# I/O Management (This includes device specific sensors and actuators)  \sa IOMan
 *
 * It first defines global preprocessor option to configure OpenSwarm. It initialises the system and I/O according to its configuration (preprocessor definitions) and with an additional command the system can be started. In addition, functions to define atomic sections (sections that cannot be interrupted by anything), allocate and free memory are also provided. 
 * 
 * \subsection ssec_intro_base_defs Definitions  
 * definition.h provides standardisation ports, configuration the used platform, and general preprocessor/type definitions that are needed in the entire OpenSwarm project.
 * 
 * \subsection ssec_intro_base_mem Memory Management  
 * OpenSwarm is designed for processing unit that lack a MMU (Memory Management Unit). As a consequence, advance memory management functions as virtual memory cannot be implemented without a significant reduction of efficiency. OpenSwarm provides atomic functions to allocate, free and copy memory in memory.h.
 * 
 * \subsection ssec_intro_base_irq Interrupt Management  
 * OpenSwarm provides a clear structure of interrupt priorities and functions to create atomic sections in interrupts.h.
 * 
 * \subsection ssec_intro_base_deps Dependencies 
 * This part of OpenSwarm executes all three modules and depends on the configuration of each part and its implementation:
 * - Process Management \sa procMan
 * - Event System \sa EventSys
 * - I/O Management (This includes device specific sensors and actuators of used platform)  \sa IOMan
 * 
 */

#include "definitions.h"

#ifdef EPUCK_USED
#define SYS_MOTOR_USED	 	/*!< Define this preprocessor symbol to use motors */
#define SYS_UART1_USED		 /*!< Define this preprocessor symbol to use UART1 */
#define SYS_REMOTECONTROL_USED	 /*!< Define this preprocessor symbol to receive remote control signals */
#define SYS_CAMERA_USED		 /*!< Define this preprocessor symbol to use the camera */
#endif


void Sys_Init_Kernel(void);   //initialises the hardware
void Sys_Start_Kernel(void);    //starts all needed functions
